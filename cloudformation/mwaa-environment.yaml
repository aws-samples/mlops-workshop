AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: "Create a AWS CodePipeline to Operationalize a Machine Learning Model."

Parameters:

  MLOpsBucket:
    Type: String
    Description: mlops S3 bucket for scripts and utilities

  DataBucket:
    Type: String
    Description: data S3 bucket for model data

  ModelSourceRepo:
    Type: String
    Description: Source code repository for model

  ImageRepoName:
    Type: String
    Description: "Name of the ECR repo without the image name."
    Default: abalone

  ImageTagName:
    Type: String
    Description: "Name of the ECR image tag."
    Default: latest

  ModelName:
    Type: String
    Description: "Name of the model."
    Default: abalone

  ExecutionRoleName:
    Type: String
    Description: "Name of the task execution Role."
    Default: MLOpsTasks

  RoleName:
    Type: String
    Description: "Name of the Airflow Role."
    Default: MLOpsAirflow
    
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: MWAAEnvironment
    
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    
  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
    
  PrivateSubnet2CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    
  MaxWorkerNodes:
    Description: The maximum number of workers that can run in the environment
    Type: Number
    Default: 2
    
  DagProcessingLogs:
    Description: Log level for DagProcessing
    Type: String
    Default: INFO
    
  SchedulerLogsLevel:
    Description: Log level for SchedulerLogs
    Type: String
    Default: INFO
    
  TaskLogsLevel:
    Description: Log level for TaskLogs
    Type: String
    Default: INFO
    
  WorkerLogsLevel:
    Description: Log level for WorkerLogs
    Type: String
    Default: INFO
    
  WebserverLogsLevel:
    Description: Log level for WebserverLogs
    Type: String
    Default: INFO

Resources:

  NewBuildEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: NewBuildEventHandler/
      Description: Handles pipeline events from the abalone model build pipeline
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${AWS::StackName}
          MODEL_NAME: !Ref ModelName
          MWAA_ENVIRONMENT_NAME: !Sub "${AWS::StackName}-MwaaEnvironment"
      FunctionName: !Sub ${ModelName}-NewBuildEventHandler
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MwaaWorkerRole.Arn
      Runtime: python3.8
      Tags:
        Name: !Sub build-event-handler-${ModelName}
      Timeout: 60
      Events:
        NewBuildEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.ecr"
              detail-type:
                - "ECR Image Action"
              detail:
                result:
                  - "SUCCESS"
                action-type:
                  - "PUSH"
                repository-name:
                  - "abalone"

  ResourceStagingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ResourceStagingFunction
      Description: Lambda custom resource to stage workshop resources in workshop bucket
      FunctionName: MLOps-ResourceStagingFunction
      Handler: lambda.lambda_handler
      Runtime: python3.9
      Timeout: 600
      Policies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  ModelEvaluationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ModelEvaluationHandler/
      Description: Performs model evaluation
      FunctionName: !Sub ${ModelName}-ModelEvaluationHandler
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MwaaWorkerRole.Arn
      Runtime: python3.8
      Tags:
        Name: !Sub build-event-handler-${ModelName}
      Timeout: 180

  MwaaWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "events.amazonaws.com"
                - "glue.amazonaws.com"
                - "lambda.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "codepipeline.amazonaws.com"
                - "states.amazonaws.com"
                - "airflow-env.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "MLOpsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "UploadImage"
                Effect: "Allow"
                Action: "ecr:*"
                Resource: "*"
              - Sid: "ECRAuthorizationToken"
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Sid: "CloudWatchMetrics"
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarms"
                Resource: "*"
              - Sid: "TriggerDag"
                Effect: "Allow"
                Action:
                  - "airflow:*"
                Resource: "*"
              - Sid: "CloudWatchLogs"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "BucketAccess"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::data-${AWS::Region}*"
                  - !Sub "arn:aws:s3:::data-${AWS::Region}*/*"
                  - !Sub "arn:aws:s3:::mlops-${AWS::Region}*"
                  - !Sub "arn:aws:s3:::mlops-${AWS::Region}*/*"
              - Sid: "CloudFormationAccess"
                Effect: "Allow"
                Effect: "Allow"
                Action:
                  - "cloudformation:Create*"
                  - "cloudformation:Delete*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Update*"
                  - "cloudformation:List*"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:GetTemplateSummary"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-dev/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-prd/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-systemtest/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
              - Sid: "CloudWatchEventsAccess"
                Effect: "Allow"
                Action:
                  - "events:*"
                Resource: "*"
              - Sid: "GlueJobResourceAccess"
                Effect: "Allow"
                Action:
                  - "glue:*"
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:*:job/*"
              - Sid: "LambdaResourceAccess"
                Effect: "Allow"
                Action:
                  - "lambda:*"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-EvaluateEndpointLambda"
                  - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-RegisterModelLambda"
                  - !Sub "arn:aws:lambda:${AWS::Region}:*:function:create-model-group-abalone"
              - Sid: "SageMakerFullAccess"
                Effect: "Allow"
                Action:
                  - "sagemaker:*"
                Resource: "*"
              - Sid: "AirflowJobsPassRole"
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::*:role/${ExecutionRoleName}"
                  - "arn:aws:iam::*:role/abalone-pipeline-systemtest-WorkflowRole"
              - Sid: "WorkflowRole"
                Effect: "Allow"
                Action:
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:DeleteRolePolicy"
                Resource:
                  - "arn:aws:iam::*:role/abalone-pipeline-systemtest-WorkflowRole"
              - Sid: "WorkflowSSM"
                Effect: "Allow"
                Action:
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                  - "ssm:AddTagsToResource"
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/WorkflowExecRole"
                  - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/EvaluateEndpoint"
                  - !Sub "arn:aws:ssm:${AWS::Region}:*:parameter/RegisterModel"
              - Sid: "AutoscalingServiceLinkedRole"
                Effect: "Allow"
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource:
                  - "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
                Condition:
                  StringLike:
                    "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
              - Sid: "CodePipelineAccess"
                Action:
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:PutApprovalResult"
                Effect: "Allow"
                Resource: "*"
              - Sid: "EndpointAutoScaling"
                Action:
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:RegisterScalableTargest"
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:DeregisterScalableTarget"
                  - "application-autoscaling:PutScalingPolicy"
                  - "application-autoscaling:DescribeScalingPolicies"
                  - "application-autoscaling:DescribeScalingActivities"
                  - "application-autoscaling:DeleteScalingPolicy"
                  - "application-autoscaling:DeleteScheduledAction"
                Effect: "Allow"
                Resource: "*"
                
  EnvironmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub mwaa-${AWS::Region}-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DagRequirementsFile:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt ResourceStagingFunction.Arn
      TargetBucket: !Ref EnvironmentBucket
      TargetKey: "requirements.txt"
              
  MwaaEnvironment:
    Type: AWS::MWAA::Environment
    DependsOn:
       - MwaaExecutionPolicy
       - DagRequirementsFile
    Properties:
      Name: !Sub "${AWS::StackName}-MwaaEnvironment"
      SourceBucketArn: !GetAtt EnvironmentBucket.Arn
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      DagS3Path: dags
      RequirementsS3Path: requirements.txt
      AirflowConfigurationOptions:
        jobenv.data_bucket_name: !Ref DataBucket
        jobenv.output_bucket_name: !Ref MLOpsBucket
        jobenv.mlops_role: !Ref ExecutionRoleName
        jobenv.model_name: !Ref ModelName
        jobenv.aws_account_id: !Ref AWS::AccountId
        jobenv.aws_region: !Ref AWS::Region
        core.enable_xcom_pickling: True # Required for Sagemaker training
        core.dags_are_paused_at_creation: False
      NetworkConfiguration:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      WebserverAccessMode: PUBLIC_ONLY
      MaxWorkers: !Ref MaxWorkerNodes
      LoggingConfiguration:
        DagProcessingLogs:
          LogLevel: !Ref DagProcessingLogs
          Enabled: true
        SchedulerLogs:
          LogLevel: !Ref SchedulerLogsLevel
          Enabled: true
        TaskLogs:
          LogLevel: !Ref TaskLogsLevel
          Enabled: true
        WorkerLogs:
          LogLevel: !Ref WorkerLogsLevel
          Enabled: true
        WebserverLogs:
          LogLevel: !Ref WebserverLogsLevel
          Enabled: true
          
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
          
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub "Security Group for Amazon MWAA Environment ${AWS::StackName}-MwaaEnvironment"
      GroupName: !Sub "airflow-security-group-${AWS::StackName}-MwaaEnvironment"

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0"
      
  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ExecutionRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "airflow-env.amazonaws.com"
                - "airflow.amazonaws.com"
                - "s3.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "events.amazonaws.com"
                - "glue.amazonaws.com"
                - "lambda.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "codepipeline.amazonaws.com"
                - "states.amazonaws.com"
                - "airflow-env.amazonaws.com"
            Action:
              - "sts:AssumeRole"
#      Path: "/service-role/"
      
  MwaaExecutionPolicy:
    DependsOn: EnvironmentBucket
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MwaaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AutoscalingServiceLinkedRole"
            Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource:
              - "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
            Condition:
              StringLike:
                "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
          - Sid: "EndpointAutoScaling"
            Action:
              - "application-autoscaling:DescribeScalableTargets"
              - "application-autoscaling:RegisterScalableTarget"
              - "application-autoscaling:DescribeScalableTargets"
              - "application-autoscaling:DeregisterScalableTarget"
              - "application-autoscaling:PutScalingPolicy"
              - "application-autoscaling:DescribeScalingPolicies"
              - "application-autoscaling:DescribeScalingActivities"
              - "application-autoscaling:DeleteScalingPolicy"
              - "application-autoscaling:DeleteScheduledAction"
            Effect: "Allow"
            Resource: "*"
          - Effect: Allow
            Action: airflow:PublishMetrics
            Resource:
              - !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${EnvironmentName}"
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - !Sub "${EnvironmentBucket.Arn}"
              - !Sub "${EnvironmentBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource:
              - !Sub "${EnvironmentBucket.Arn}"
              - !Sub "${EnvironmentBucket.Arn}/*"
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource: "*"
          - Sid: "UploadImage"
            Effect: "Allow"
            Action: "ecr:*"
            Resource: "*"
          - Sid: "ECRAuthorizationToken"
            Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-${AWS::StackName}*"
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
          - Effect: "Allow"
            Action:
              - "lambda:*"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-EvaluateEndpointLambda"
              - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-RegisterModelLambda"
              - !Sub "arn:aws:lambda:${AWS::Region}:*:function:create-model-group-abalone"
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - "kms:GenerateDataKey*"
              - kms:Encrypt
            NotResource: !Sub "arn:aws:kms:*:${AWS::AccountId}:key/*"
            Condition:
              StringLike:
                "kms:ViaService":
                  - !Sub "sqs.${AWS::Region}.amazonaws.com"
          - Sid: "CloudWatchMetrics"
            Effect: "Allow"
            Action:
              - "cloudwatch:PutMetricData"
              - "cloudwatch:GetMetricData"
              - "cloudwatch:GetMetricStatistics"
              - "cloudwatch:ListMetrics"
              - "cloudwatch:PutMetricAlarm"
              - "cloudwatch:DeleteAlarms"
              - "cloudwatch:DescribeAlarms"
            Resource: "*"
          - Sid: "CloudWatchLogs"
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:DescribeLogStreams"
              - "logs:PutLogEvents"
              - "logs:GetLogEvents"
            Resource: "*"
          - Sid: "BucketAccess"
            Effect: "Allow"
            Action:
              - "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::mlops-${AWS::Region}*"
              - !Sub "arn:aws:s3:::mlops-${AWS::Region}*/*"
              - !Sub "arn:aws:s3:::mwaa-${AWS::Region}*"
              - !Sub "arn:aws:s3:::mwaa-${AWS::Region}*/*"
              - !Sub "arn:aws:s3:::data-${AWS::Region}*"
              - !Sub "arn:aws:s3:::data-${AWS::Region}*/*"
          - Sid: "CloudFormationAccess"
            Effect: "Allow"
            Action:
              - "cloudformation:Create*"
              - "cloudformation:Delete*"
              - "cloudformation:Describe*"
              - "cloudformation:Update*"
              - "cloudformation:List*"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:GetTemplateSummary"
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline/*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-dev/*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-prd/*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-systemtest/*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
          - Sid: "CloudWatchEventsAccess"
            Effect: "Allow"
            Action:
              - "events:*"
            Resource: "*"
          - Sid: "CodeBuildImageAccess"
            Effect: "Allow"
            Action:
              - "codebuild:*"
            Resource:
              - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-buildimage-abalone"
              - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-abalone-custom-reources"
              - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-buildworkflow-abalone"
              - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-build-deployment-abalone"
          - Sid: "GlueJobResourceAccess"
            Effect: "Allow"
            Action:
              - "glue:*"
            Resource:
              - !Sub "arn:aws:glue:${AWS::Region}:*:job/*"
          - Sid: "LambdaResourceAccess"
            Effect: "Allow"
            Action:
              - "lambda:*"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-EvaluateEndpointLambda"
          #              - !Sub "arn:aws:lambda:${AWS::Region}:*:function:abalone-pipeline-systemtest-RegisterModelLambda"
          - Sid: "SageMakerFullAccess"
            Effect: "Allow"
            Action:
              - "sagemaker:*"
            Resource: "*"
          - Sid: "AirflowJobsPassRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - !Sub "arn:aws:iam::*:role/${RoleName}"
              - !Sub "arn:aws:iam::*:role/${ExecutionRoleName}"
