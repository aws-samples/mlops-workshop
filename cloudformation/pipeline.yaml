AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: "Create a AWS CodePipeline to Operationalize a Machine Learning Model."

Parameters:

  ModelSourceRepo:
    Type: String
    Description: Source code repository for model

  ImageRepoName:
    Type: String
    Description: "Name of the ECR repo without the image name."
    Default: abalone

  ImageTagName:
    Type: String
    Description: "Name of the ECR image tag."
    Default: latest

  ModelName:
    Type: String
    Description: "Name of the model."
    Default: abalone

  PipelineRoleName:
    Type: String
    Description: "Name of the Pipeline execution Role."
    Default: MLOpsPipeline

  MLOpsBucket:
    Type: String
    Description: The MLOps bucket is where cicd will stage the etl script for mwaa to pick it up

Resources:

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref PipelineRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "events.amazonaws.com"
                - "glue.amazonaws.com"
                - "lambda.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "codepipeline.amazonaws.com"
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "MLOpsPipelineRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "CodeCommitAccess"
                Effect: "Allow"
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:*:${ModelSourceRepo}"
              - Sid: "UploadImage"
                Effect: "Allow"
                Action: "ecr:*"
                Resource: "*"
              - Sid: "ECRAuthorizationToken"
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Sid: "CloudWatchMetrics"
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarms"
                Resource: "*"
              - Sid: "CloudWatchLogs"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "BucketAccess"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::mlops-${AWS::Region}*"
                  - !Sub "arn:aws:s3:::mlops-${AWS::Region}*/*"
              - Sid: "CloudFormationAccess"
                Effect: "Allow"
                Action:
                  - "cloudformation:Create*"
                  - "cloudformation:Delete*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Update*"
                  - "cloudformation:List*"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:GetTemplateSummary"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-dev/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-deploy-prd/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:*:stack/abalone-pipeline-systemtest/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
              - Sid: "CloudWatchEventsAccess"
                Effect: "Allow"
                Action:
                  - "events:*"
                Resource: "*"
              - Sid: "CodeBuildImageAccess"
                Effect: "Allow"
                Action:
                  - "codebuild:*"
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-buildimage-abalone"
                  - !Sub "arn:aws:codebuild:${AWS::Region}:*:project/mlops-stageetl-${ModelName}"
              - Sid: "MLOpsPassRole"
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::*:role/${PipelineRoleName}"
                  - "arn:aws:iam::*:role/abalone-pipeline-systemtest-WorkflowRole"
              - Sid: "CodePipelineAccess"
                Action:
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:PutApprovalResult"
                Effect: "Allow"
                Resource: "*"
              - Sid: "EndpointAutoScaling"
                Action:
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:RegisterScalableTarget"
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:DeregisterScalableTarget"
                  - "application-autoscaling:PutScalingPolicy"
                  - "application-autoscaling:DescribeScalingPolicies"
                  - "application-autoscaling:DescribeScalingActivities"
                  - "application-autoscaling:DeleteScalingPolicy"
                  - "application-autoscaling:DeleteScheduledAction"
                Effect: "Allow"
                Resource: "*"

  BuildImageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-buildimage-${ModelName}
      Description: "Build the Model Training and Inference Image."
      ServiceRole: !GetAtt PipelineRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          Version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - printenv
                - echo Updating Packages ...
                - pip install --upgrade --force-reinstall botocore boto3 awscli
            build:
              Commands:
                - cd model
                - echo Build started on `date`
                - echo Logging in to the Amazon Deep Learning Contain Repository ...
                - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 763104351884.dkr.ecr.us-west-2.amazonaws.com
                - echo Building the Container image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Logging in to ECR Repository...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - echo Pushing the Container image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
              finally:
                - echo Build completed on `date`
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Ref ImageRepoName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub mlops-buildimage-${ModelName}

  StageEtlProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-stageetl-${ModelName}
      Description: "Stage ETL script for airflow dag"
      ServiceRole: !GetAtt PipelineRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          Version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - printenv
            post_build:
              Commands:
                - cd etl
                - aws s3 cp preprocess.py s3://${MLOPS_BUCKET}/${TARGET_KEY}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: MLOPS_BUCKET
            Value: !Ref MLOpsBucket
          - Name: TARGET_KEY
            Value: "code/preprocess.py"
      Tags:
        - Key: Name
          Value: !Sub mlops-stageetl-${ModelName}

  MLOpsPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${PipelineRoleName}
      ArtifactStore:
          Type: S3
          Location: !Sub mlops-${AWS::Region}-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions: 
            - Name: ModelSource
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts: 
                - Name: ModelSourceOutput
              Configuration:
                BranchName: main
                RepositoryName: !Ref ModelSourceRepo
                PollForSourceChanges: true
              RunOrder: 1
        - Name: StageETL
          Actions:
            - Name: StageEtl
              InputArtifacts:
                - Name: ModelSourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref StageEtlProject
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildImage
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildImageOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildImageProject
              RunOrder: 1